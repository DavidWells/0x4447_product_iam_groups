{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "This is collection of IAM Groups that anyone should use for every AWS account.",
	"Resources": {
		"IAMGroupAccountants": {
			"Type": "AWS::IAM::Group",
			"Description": "Accountants will have access only to the billing section of AWS.",
			"Properties": {
				"GroupName": "Accountants",
				"Path": "/Department/Accountants/",
				"Policies": [
					{
						"PolicyName": "portal",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "aws-portal:*",
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"IAMGroupPowerUsers": {
			"Type": "AWS::IAM::Group",
			"Description": "All the privilege of a Root group, minus the ability to to manage users. Meaning no access to IAM, etc.",
			"Properties": {
				"GroupName": "Admins",
				"Path": "/Department/Admins/",
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/AdministratorAccess"
				],
				"Policies": [
					{
						"PolicyName": "no_iam_access",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Deny",
									"Action": "iam:*",
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"IAMGroupOwners": {
			"Type": "AWS::IAM::Group",
			"Description": "Owners are like Admins, but just own the company.",
			"Properties": {
				"GroupName": "Owners",
				"Path": "/Department/Owners/",
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/AdministratorAccess"
				]
			}
		},
		"IAMGroupAdmins": {
			"Type": "AWS::IAM::Group",
			"Description": "Full access to the whole AWS account.",
			"Properties": {
				"GroupName": "Root",
				"Path": "/Department/Root/",
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/AdministratorAccess"
				]
			}
		},
		"IAMGroupAuditors": {
			"Type": "AWS::IAM::Group",
			"Description": "Read only access to specific parts of the site.",
			"Properties": {
				"GroupName": "Auditors",
				"Path": "/Department/Auditors/",
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/job-function/ViewOnlyAccess"
				],
				"Policies": [
					{
						"PolicyName": "policy_simulator",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"iam:GetContextKeysForPrincipalPolicy",
										"iam:SimulatePrincipalPolicy"
									],
									"Resource": "arn:aws:iam::*:user/Department/Auditors/*"
								}
							]
						}
					}
				]
			}
		},
		"IAMGroupSupport": {
			"Type": "AWS::IAM::Group",
			"Description": "Mostly read only access to the AWS account to help them debug issues.",
			"Properties": {
				"GroupName": "Support",
				"Path": "/Department/Support/",
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/job-function/SupportUser"
				]
			}
		},
		"IAMGroupDevelopers": {
			"Type": "AWS::IAM::Group",
			"Description": "Can only see CodeBuild logs, can check CodePipeline status and trigger builds if needed, and have access to CodeCommit.",
			"Properties": {
				"GroupName": "Developers",
				"Path": "/Department/Developers/",
				"Policies": [
					{
						"PolicyName": "logs",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"logs:ListTagsLogGroup",
										"logs:DescribeLogGroups",
										"logs:DescribeLogStreams",
										"logs:DescribeSubscriptionFilters",
										"logs:StartQuery",
										"logs:GetLogEvents",
										"logs:DescribeMetricFilters",
										"logs:FilterLogEvents",
										"logs:GetLogGroupFields"
									],
									"Resource": "arn:aws:logs:*:*:log-group:*"
								},
								{
									"Effect": "Allow",
									"Action": "logs:GetLogEvents",
									"Resource": "arn:aws:logs:*:*:log-group:*:log-stream:*"
								},
								{
									"Effect": "Allow",
									"Action": [
										"logs:DescribeQueries",
										"logs:DescribeExportTasks",
										"logs:GetLogRecord",
										"logs:GetQueryResults",
										"logs:StopQuery",
										"logs:TestMetricFilter",
										"logs:DescribeResourcePolicies",
										"logs:GetLogDelivery",
										"logs:DescribeDestinations",
										"logs:ListLogDeliveries"
									],
									"Resource": "*"
								}
							]
						}
					},
					{
						"PolicyName": "cloudwatch",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"cloudwatch:DescribeAlarmHistory",
										"cloudwatch:GetDashboard",
										"cloudwatch:ListTagsForResource",
										"cloudwatch:DescribeAlarms"
									],
									"Resource": [
										"arn:aws:cloudwatch::*:dashboard/*",
										"arn:aws:cloudwatch:*:*:alarm:*"
									]
								},
								{
									"Effect": "Allow",
									"Action": [
										"cloudwatch:GetMetricData",
										"cloudwatch:DescribeAlarmsForMetric",
										"cloudwatch:ListDashboards",
										"cloudwatch:GetMetricStatistics",
										"cloudwatch:GetMetricWidgetImage",
										"cloudwatch:ListMetrics",
										"cloudwatch:DescribeAnomalyDetectors"
									],
									"Resource": "*"
								}
							]
						}
					},
					{
						"PolicyName": "codebuild",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"codebuild:BatchGetProjects",
										"codebuild:ListBuildsForProject",
										"codebuild:BatchGetBuilds"
									],
									"Resource": "arn:aws:codebuild:*:*:project/*"
								},
								{
									"Effect": "Allow",
									"Action": [
										"codebuild:ListBuilds",
										"codebuild:ListCuratedEnvironmentImages",
										"codebuild:ListSourceCredentials",
										"codebuild:ListProjects",
										"codebuild:ListRepositories",
										"codebuild:ListConnectedOAuthAccounts"
									],
									"Resource": "*"
								}
							]
						}
					},
					{
						"PolicyName": "codepipeline",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "codepipeline:RetryStageExecution",
									"Resource": "arn:aws:codepipeline:*:*:*/*"
								},
								{
									"Effect": "Allow",
									"Action": [
										"codepipeline:ListPipelineExecutions",
										"codepipeline:StartPipelineExecution",
										"codepipeline:ListActionExecutions",
										"codepipeline:ListPipelines",
										"codepipeline:GetPipeline",
										"codepipeline:ListTagsForResource",
										"codepipeline:GetPipelineState",
										"codepipeline:GetPipelineExecution"
									],
									"Resource": "arn:aws:codepipeline:*:*:*"
								},
								{
									"Effect": "Allow",
									"Action": [
										"codepipeline:ListWebhooks",
										"codepipeline:ListTagsForResource",
										"codepipeline:ListActionTypes"
									],
									"Resource": [
										"arn:aws:codepipeline:*:*:webhook:*",
										"arn:aws:codepipeline:*:*:actiontype:*/*/*/*"
									]
								},
								{
									"Effect": "Allow",
									"Action": [
										"codepipeline:GetThirdPartyJobDetails",
										"codepipeline:GetJobDetails"
									],
									"Resource": "*"
								}
							]
						}
					},
					{
						"PolicyName": "codecommit",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"codecommit:CreateBranch",
										"codecommit:ListPullRequests",
										"codecommit:PutFile",
										"codecommit:CreateCommit",
										"codecommit:ListTagsForResource",
										"codecommit:BatchDescribeMergeConflicts",
										"codecommit:GetCommentsForComparedCommit",
										"codecommit:GetComment",
										"codecommit:UpdateComment",
										"codecommit:MergePullRequestByThreeWay",
										"codecommit:CreatePullRequest",
										"codecommit:PostCommentForPullRequest",
										"codecommit:GetRepositoryTriggers",
										"codecommit:UpdatePullRequestDescription",
										"codecommit:GetObjectIdentifier",
										"codecommit:BatchGetPullRequests",
										"codecommit:GetFile",
										"codecommit:GetUploadArchiveStatus",
										"codecommit:MergePullRequestBySquash",
										"codecommit:GetDifferences",
										"codecommit:GetRepository",
										"codecommit:GetMergeConflicts",
										"codecommit:GetMergeCommit",
										"codecommit:PostCommentForComparedCommit",
										"codecommit:GitPush",
										"codecommit:GetMergeOptions",
										"codecommit:GetTree",
										"codecommit:GetBlob",
										"codecommit:GetReferences",
										"codecommit:DescribeMergeConflicts",
										"codecommit:UpdatePullRequestTitle",
										"codecommit:GetCommit",
										"codecommit:GetCommitHistory",
										"codecommit:GetCommitsFromMergeBase",
										"codecommit:BatchGetCommits",
										"codecommit:DescribePullRequestEvents",
										"codecommit:UpdatePullRequestStatus",
										"codecommit:GetPullRequest",
										"codecommit:ListBranches",
										"codecommit:MergeBranchesBySquash",
										"codecommit:BatchGetRepositories",
										"codecommit:GitPull",
										"codecommit:GetCommentsForPullRequest",
										"codecommit:CancelUploadArchive",
										"codecommit:GetFolder",
										"codecommit:PostCommentReply",
										"codecommit:MergeBranchesByFastForward",
										"codecommit:CreateUnreferencedMergeCommit",
										"codecommit:MergeBranchesByThreeWay",
										"codecommit:GetBranch",
										"codecommit:MergePullRequestByFastForward",
										"codecommit:DeleteBranch"
									],
									"Resource": "arn:aws:codecommit:*:*:*"
								},
								{
									"Effect": "Allow",
									"Action": "codecommit:ListRepositories",
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		}
	}
}